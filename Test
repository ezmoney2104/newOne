import { shallowMount } from '@vue/test-utils';
import CanvasDisplay from './CanvasDisplay.vue';
import FetchAPI from '@/utils/apiRequest';

jest.mock('@/utils/apiRequest', () => ({
  FetchAPI: jest.fn(() => ({
    get: jest.fn(() => Promise.resolve({ data: [] })),
  })),
}));

describe('CanvasDisplay.vue', () => {
  let wrapper;

  beforeEach(() => {
    wrapper = shallowMount(CanvasDisplay);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders the canvas element', () => {
    expect(wrapper.find('canvas').exists()).toBe(true);
  });

  it('calls fetchImage and fetchData on mount', async () => {
    const fetchImageSpy = jest.spyOn(CanvasDisplay.methods, 'fetchImage');
    const fetchDataSpy = jest.spyOn(CanvasDisplay.methods, 'fetchData');

    await wrapper.vm.$nextTick();

    expect(fetchImageSpy).toHaveBeenCalledTimes(1);
    expect(fetchDataSpy).toHaveBeenCalledTimes(1);
  });

  it('fetchImage fetches the image from the backend', async () => {
    const fetchApi = new FetchAPI();
    const getSpy = jest.spyOn(fetchApi, 'get');

    await wrapper.vm.fetchImage();

    expect(getSpy).toHaveBeenCalledTimes(1);
    expect(getSpy).toHaveBeenCalledWith('/api/yellow-line/image/lane.png', {
      responseType: 'blob',
    });
  });

  it('fetchData fetches the process data from the backend', async () => {
    const fetchApi = new FetchAPI();
    const getSpy = jest.spyOn(fetchApi, 'get');

    await wrapper.vm.fetchData();

    expect(getSpy).toHaveBeenCalledTimes(1);
    expect(getSpy).toHaveBeenCalledWith('/api/process');
  });

  it('generateCanvas generates the canvas using the image URL', async () => {
    const generateCanvasSpy = jest.spyOn(CanvasDisplay.methods, 'generateCanvas');
    const imageURL = 'https://example.com/image.png';

    await wrapper.vm.generateCanvas(imageURL);

    expect(generateCanvasSpy).toHaveBeenCalledTimes(1);
    expect(generateCanvasSpy).toHaveBeenCalledWith(imageURL);
  });

  it('setColor returns the correct color based on the productNum', () => {
    expect(wrapper.vm.setColor(1)).toBe('green');
    expect(wrapper.vm.setColor(2)).toBe('red');
    expect(wrapper.vm.setColor(3)).toBeUndefined();
  });

  it('styleLabel styles the label correctly', () => {
    const ctx = {
      beginPath: jest.fn(),
      arc: jest.fn(),
      closePath: jest.fn(),
      fillStyle: jest.fn(),
      fill: jest.fn(),
      strokeStyle: jest.fn(),
      lineWidth: jest.fn(),
      stroke: jest.fn(),
      font: jest.fn(),
      textAlign: jest.fn(),
      textBaseline: jest.fn(),
      fillText: jest.fn(),
    };

    wrapper.vm.styleLabel(ctx, 10, 20, 30, 'label', 'fillStyle', 'strokeStyle');

    expect(ctx.beginPath).toHaveBeenCalledTimes(1);
    expect(ctx.arc).toHaveBeenCalledTimes(1);
    expect(ctx.closePath).toHaveBeenCalledTimes(1);
    expect(ctx.fillStyle).toHaveBeenCalledTimes(2);
    expect(ctx.fill).toHaveBeenCalledTimes(1);
    expect(ctx.strokeStyle).toHaveBeenCalledTimes(1);
    expect(ctx.lineWidth).toHaveBeenCalledTimes(1);
    expect(ctx.stroke).toHaveBeenCalledTimes(1);
    expect(ctx.font).toHaveBeenCalledTimes(1);
    expect(ctx.textAlign).toHaveBeenCalledTimes(1);
    expect(ctx.textBaseline).toHaveBeenCalledTimes(1);
    expect(ctx.fillText).toHaveBeenCalledTimes(1);
  });
});


-----


// CanvasDisplay.spec.js

import { shallowMount } from '@vue/test-utils'
import CanvasDisplay from '@/components/CanvasDisplay.vue'
import { FetchAPI } from '@/utils/apiRequest'

jest.mock('@/utils/apiRequest', () => ({
  FetchAPI: jest.fn().mockImplementation(() => ({
    get: jest.fn(),
  })),
}))

describe('CanvasDisplay.vue', () => {
  let wrapper
  let fetchApiMock

  beforeEach(() => {
    fetchApiMock = new FetchAPI()
    wrapper = shallowMount(CanvasDisplay, {
      mocks: {
        $refs: {
          myCanvas: document.createElement('canvas'),
        },
      },
    })
  })

  afterEach(() => {
    jest.clearAllMocks()
    wrapper.unmount()
  })

  it('should call fetchImage and fetchData on mount', () => {
    const fetchImageSpy = jest.spyOn(wrapper.vm, 'fetchImage')
    const fetchDataSpy = jest.spyOn(wrapper.vm, 'fetchData')
    
    wrapper.vm.$options.mounted[0].call(wrapper.vm)
    
    expect(fetchImageSpy).toHaveBeenCalled()
    expect(fetchDataSpy).toHaveBeenCalled()
  })

  it('should fetch and generate canvas image', async () => {
    const mockBlob = new Blob(['image data'], { type: 'image/png' })
    const mockObjectURL = 'blob:http://localhost/image'
    
    global.URL.createObjectURL = jest.fn(() => mockObjectURL)
    fetchApiMock.get.mockResolvedValueOnce(mockBlob)
    const generateCanvasSpy = jest.spyOn(wrapper.vm, 'generateCanvas')
    
    await wrapper.vm.fetchImage()

    expect(fetchApiMock.get).toHaveBeenCalledWith('/api/yellow-line/image/lane.png', { responseType: 'blob' })
    expect(global.URL.createObjectURL).toHaveBeenCalledWith(mockBlob)
    expect(generateCanvasSpy).toHaveBeenCalledWith(mockObjectURL)
  })

  it('should handle error in fetchImage', async () => {
    const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {})
    const mockError = new Error('Failed to fetch')
    fetchApiMock.get.mockRejectedValueOnce(mockError)
    
    await wrapper.vm.fetchImage()

    expect(consoleErrorSpy).toHaveBeenCalledWith('Error fetching the image:', mockError)
    
    consoleErrorSpy.mockRestore()
  })

  it('should fetch process data and update processData', async () => {
    const mockResponse = {
      data: [
        { id: 1, x_coord: 10, y_coord: 20, width: 30, height: 40, product_num: 1 },
        { id: 2, x_coord: 50, y_coord: 60, width: 70, height: 80, product_num: 2 },
      ],
    }
    fetchApiMock.get.mockResolvedValueOnce(mockResponse)
    
    await wrapper.vm.fetchData()

    expect(fetchApiMock.get).toHaveBeenCalledWith('/api/process')
    expect(wrapper.vm.processData).toEqual([
      { id: 1, x: 10, y: 20, width: 30, height: 40, productNum: 1 },
      { id: 2, x: 50, y: 60, width: 70, height: 80, productNum: 2 },
    ])
  })

  it('should generate canvas and draw image and rectangles', () => {
    const mockCtx = {
      drawImage: jest.fn(),
      fillRect: jest.fn(),
      strokeRect: jest.fn(),
      beginPath: jest.fn(),
      arc: jest.fn(),
      closePath: jest.fn(),
      fill: jest.fn(),
      stroke: jest.fn(),
      fillText: jest.fn(),
    }
    const canvas = wrapper.vm.$refs.myCanvas
    const image = new Image()
    jest.spyOn(canvas, 'getContext').mockReturnValue(mockCtx)
    wrapper.vm.processData = [
      { id: 1, x: 10, y: 20, width: 30, height: 40, productNum: 1 },
    ]

    wrapper.vm.generateCanvas('mockImageUrl')
    image.onload()

    expect(mockCtx.drawImage).toHaveBeenCalled()
    expect(mockCtx.fillRect).toHaveBeenCalledWith(10, 20, 30, 40)
    expect(mockCtx.strokeRect).toHaveBeenCalledWith(10, 20, 30, 40)
    expect(mockCtx.fillText).toHaveBeenCalledWith('1', 25, 40)
  })

  it('should set color correctly based on productNum', () => {
    expect(wrapper.vm.setColor(1)).toBe('green')
    expect(wrapper.vm.setColor(2)).toBe('red')
    expect(wrapper.vm.setColor(3)).toBeUndefined()
  })

  it('should draw labels correctly on the canvas', () => {
    const mockCtx = {
      beginPath: jest.fn(),
      arc: jest.fn(),
      closePath: jest.fn(),
      fill: jest.fn(),
      stroke: jest.fn(),
      fillText: jest.fn(),
    }
    const x = 100
    const y = 150
    const radius = 15
    const label = '1'
    const fillStyle = 'transparent'
    const strokeStyle = 'white'

    wrapper.vm.generateCanvas.toString().match(/styleLabel\(.*?\) {/)[0]
    const styleLabel = (ctx, x, y, radius, label, fillStyle, strokeStyle) => {
      ctx.beginPath()
      ctx.arc(x, y, radius, 0, Math.PI * 2)
      ctx.closePath()
      ctx.fillStyle = fillStyle
      ctx.fill()
      ctx.strokeStyle = strokeStyle
      ctx.lineWidth = 3
      ctx.stroke()
      ctx.fillText(label, x, y)
    }

    styleLabel(mockCtx, x, y, radius, label, fillStyle, strokeStyle)

    expect(mockCtx.beginPath).toHaveBeenCalled()
    expect(mockCtx.arc).toHaveBeenCalledWith(x, y, radius, 0, Math.PI * 2)
    expect(mockCtx.closePath).toHaveBeenCalled()
    expect(mockCtx.fillStyle).toBe(fillStyle)
    expect(mockCtx.fill).toHaveBeenCalled()
    expect(mockCtx.strokeStyle).toBe(strokeStyle)
    expect(mockCtx.stroke).toHaveBeenCalled()
    expect(mockCtx.fillText).toHaveBeenCalledWith(label, x, y)
  })
})




bbox--

import { shallowMount } from '@vue/test-utils';
import CanvasDisplay from './CanvasDisplay.vue';
import FetchAPI from '@/utils/apiRequest';

jest.mock('@/utils/apiRequest', () => ({
  FetchAPI: jest.fn(() => ({
    get: jest.fn(() => Promise.resolve({ data: [] })),
  })),
}));

describe('CanvasDisplay.vue', () => {
  let wrapper;

  beforeEach(() => {
    wrapper = shallowMount(CanvasDisplay);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders the canvas element', () => {
    expect(wrapper.find('canvas').exists()).toBe(true);
  });

  it('calls fetchImage and fetchData on mount', async () => {
    const fetchImageSpy = jest.spyOn(CanvasDisplay.methods, 'fetchImage');
    const fetchDataSpy = jest.spyOn(CanvasDisplay.methods, 'fetchData');

    await wrapper.vm.$nextTick();

    expect(fetchImageSpy).toHaveBeenCalledTimes(1);
    expect(fetchDataSpy).toHaveBeenCalledTimes(1);
  });

  it('fetchImage fetches the image from the backend', async () => {
    const fetchApi = new FetchAPI();
    const getSpy = jest.spyOn(fetchApi, 'get');

    await wrapper.vm.fetchImage();

    expect(getSpy).toHaveBeenCalledTimes(1);
    expect(getSpy).toHaveBeenCalledWith('/api/yellow-line/image/lane.png', {
      responseType: 'blob',
    });
  });

  it('fetchData fetches the process data from the backend', async () => {
    const fetchApi = new FetchAPI();
    const getSpy = jest.spyOn(fetchApi, 'get');

    await wrapper.vm.fetchData();

    expect(getSpy).toHaveBeenCalledTimes(1);
    expect(getSpy).toHaveBeenCalledWith('/api/process');
  });

  it('generateCanvas generates the canvas using the image URL', async () => {
    const generateCanvasSpy = jest.spyOn(CanvasDisplay.methods, 'generateCanvas');
    const imageURL = 'https://example.com/image.png';

    await wrapper.vm.generateCanvas(imageURL);

    expect(generateCanvasSpy).toHaveBeenCalledTimes(1);
    expect(generateCanvasSpy).toHaveBeenCalledWith(imageURL);
  });

  it('setColor returns the correct color based on the productNum', () => {
    expect(wrapper.vm.setColor(1)).toBe('green');
    expect(wrapper.vm.setColor(2)).toBe('red');
    expect(wrapper.vm.setColor(3)).toBeUndefined();
  });

  it('styleLabel styles the label correctly', () => {
    const ctx = {
      beginPath: jest.fn(),
      arc: jest.fn(),
      closePath: jest.fn(),
      fillStyle: jest.fn(),
      fill: jest.fn(),
      strokeStyle: jest.fn(),
      lineWidth: jest.fn(),
      stroke: jest.fn(),
      font: jest.fn(),
      textAlign: jest.fn(),
      textBaseline: jest.fn(),
      fillText: jest.fn(),
    };

    wrapper.vm.styleLabel(ctx, 10, 20, 30, 'label', 'fillStyle', 'strokeStyle');

    expect(ctx.beginPath).toHaveBeenCalledTimes(1);
    expect(ctx.arc).toHaveBeenCalledTimes(1);
    expect(ctx.closePath).toHaveBeenCalledTimes(1);
    expect(ctx.fillStyle).toHaveBeenCalledTimes(2);
    expect(ctx.fill).toHaveBeenCalledTimes(1);
    expect(ctx.strokeStyle).toHaveBeenCalledTimes(1);
    expect(ctx.lineWidth).toHaveBeenCalledTimes(1);
    expect(ctx.stroke).toHaveBeenCalledTimes(1);
    expect(ctx.font).toHaveBeenCalledTimes(1);
    expect(ctx.textAlign).toHaveBeenCalledTimes(1);
    expect(ctx.textBaseline).toHaveBeenCalledTimes(1);
    expect(ctx.fillText).toHaveBeenCalledTimes(1);
  });

  it('processData is initialized as an empty array', () => {
    expect(wrapper.vm.processData).toEqual([]);
  });

  it('fetchData updates processData', async () => {
    const processData = [
      { id: 1, x_coord: 10, y_coord: 20, width: 30, height: 40, product_num: 1 },
      { id: 2, x_coord: 50, y_coord: 60, width: 70, height: 80, product_num: 2 },
    ];

    FetchAPI.prototype.get.mockImplementationOnce(() => Promise.resolve({ data: processData }));

    await wrapper.vm.fetchData();

    expect(wrapper.vm.processData).toEqual([
      { id: 1, x: 10, y: 20, width: 30, height: 40, productNum: 1 },
      { id: 2, x: 50, y: 60, width: 70, height: 80, productNum: 2 },
    ]);
  });

  it('generateCanvas draws the image on the canvas', async () => {
    const canvas = wrapper.find('canvas');
    const ctx = canvas.element.getContext('2d');
    const image = new Image();
    image.src = 'https://example.com/image


