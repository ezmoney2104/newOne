<template>
  <v-container fluid>
    <div ref="plotElement"></div>
    <div ref="Temp"></div>
  </v-container>
</template>

<script>
import Plotly from 'plotly.js-dist'

export default {
  name: 'AmbientTemperature',

  data() {
    return {
      config: { responsive: true, displayModeBar: false },
      cnt: 0,
      chartData: [
        {
          y: [this.randomTemp()],
          mode: 'lines+markers',
          marker: { color: 'rgb(128, 0, 128)', size: 4 },
          line: { width: 1 },
          name: '2025',
        },
        {
          x: [0, 1000],
          y: [10, 10],
          mode: 'line',
          line: {
            color: 'rgb(50, 171, 96)',
            width: 4,
            // dash: 'dashdot',
          },
          name: '10 °C',
        },
        {
          x: [0, 1000],
          y: [40, 40],
          mode: 'line',
          line: {
            color: 'rgb(183, 28, 28)',
            width: 4,
            // dash: 'dashdot',
          },
          name: '40 °C',
        },
      ],
      layout: {
        xaxis: { title: 'sample title', range: [0, 50] },
        yaxis: { title: 'Temperature °C', range: [0, 100] },
        title: 'Process Temperature Monitoring Screen',
      },
      tempData: [
        {
          type: 'indicator',
          mode: 'number+gauge+delta',
          gauge: {
            shape: 'bullet',
            steps: [{ range: [0, 100], color: 'lightgray' }],
            axis: { range: [null, 100] },
          },
          delta: { reference: 100 },
          value: this.randomTemp(),
          domain: { x: [0, 1], y: [0, 1] },
          title: { text: 'Temp' },
        },
      ],
      layoutTemp: {
        height: 250,
      },

      polling: null,
    }
  },
  mounted() {
    this.renderChart()
    this.newTrace()
  },

  methods: {
    /**
     * Function to initialize and display Ambient Temperature Graph
     */
    renderChart() {
      Plotly.newPlot(this.$refs.plotElement, this.chartData, this.layout, this.config)
      Plotly.newPlot(this.$refs.Temp, this.tempData, this.layoutTemp, this.config)
    },

    /**
     * Function to extends movement of the Ambient Temperature Graph when counter reaches greater than 50
     */
    newTrace() {
      this.polling = setInterval(() => {
        Plotly.extendTraces(this.$refs.plotElement, { y: [[this.randomTemp()]] }, [0])
        // Plotly.update(this.$refs.Temp, { value: this.randomTemp() }, [0])
        this.cnt++
        // Adjust x-axis range for smooth scrolling
        if (this.cnt > 50) {
          Plotly.relayout(this.$refs.plotElement, {
            xaxis: {
              range: [this.cnt - 50, this.cnt],
              title: 'sample title',
            },
          })
        }
        // Stop plotting after 1000 points
        if (this.cnt >= 1000) {
          clearInterval(this.polling)
          console.log('Stopped plotting after reaching 1000 points.')
        }
      }, 2000)
    },

    /**
     * Returns a random integer from 0 to 100
     * @returns {integer} returns random integer
     */
    randomTemp() {
      let random = Math.floor(Math.random() * 101)
      return random
    },
  },
}
</script>


-------------

<template>
  <v-container fluid>
    <div ref="plotElement"></div>
    <div ref="Temp" style="margin-top: 20px;"></div>
  </v-container>
</template>

<script>
import Plotly from 'plotly.js-dist'

export default {
  name: 'AmbientTemperature',

  data() {
    return {
      config: { responsive: true, displayModeBar: false },
      cnt: 0,
      currentTemp: 0,
      chartData: [
        {
          y: [this.randomTemp()],
          mode: 'lines+markers',
          marker: { color: 'rgb(128, 0, 128)', size: 4 },
          line: { width: 1 },
          name: '2025',
        },
        {
          x: [0, 1000],
          y: [10, 10],
          mode: 'line',
          line: {
            color: 'rgb(50, 171, 96)',
            width: 4,
          },
          name: '10 °C',
        },
        {
          x: [0, 1000],
          y: [40, 40],
          mode: 'line',
          line: {
            color: 'rgb(183, 28, 28)',
            width: 4,
          },
          name: '40 °C',
        },
      ],
      layout: {
        xaxis: { title: 'sample title', range: [0, 50] },
        yaxis: { title: 'Temperature °C', range: [0, 100] },
        title: 'Process Temperature Monitoring Screen',
      },
      tempData: [
        {
          type: 'indicator',
          mode: 'number+gauge+delta',
          gauge: {
            shape: 'bullet',
            steps: [{ range: [0, 100], color: 'lightgray' }],
            axis: { range: [null, 100] },
          },
          delta: { reference: 50 },
          value: this.randomTemp(),
          domain: { x: [0, 1], y: [0, 1] },
          title: { text: 'Temperature' },
        },
      ],
      layoutTemp: {
        height: 250,
        title: 'Current Temperature',
      },
      polling: null,
    }
  },
  mounted() {
    this.renderChart()
    this.newTrace()
  },

  methods: {
    /**
     * Initialize and display the Ambient Temperature Graph and Indicator
     */
    renderChart() {
      Plotly.newPlot(this.$refs.plotElement, this.chartData, this.layout, this.config)
      Plotly.newPlot(this.$refs.Temp, this.tempData, this.layoutTemp, this.config)
    },

    /**
     * Update the Ambient Temperature Graph and Indicator
     */
    newTrace() {
      this.polling = setInterval(() => {
        // Generate a random temperature and update the graph
        this.currentTemp = this.randomTemp()
        Plotly.extendTraces(this.$refs.plotElement, { y: [[this.currentTemp]] }, [0])
        this.cnt++

        // Update the indicator graph with the current temperature
        Plotly.update(this.$refs.Temp, { value: [this.currentTemp] }, [0])

        // Adjust x-axis range for smooth scrolling
        if (this.cnt > 50) {
          Plotly.relayout(this.$refs.plotElement, {
            xaxis: {
              range: [this.cnt - 50, this.cnt],
              title: 'Sample Title',
            },
          })
        }

        // Stop plotting after 1000 points
        if (this.cnt >= 1000) {
          clearInterval(this.polling)
          console.log('Stopped plotting after reaching 1000 points.')
        }
      }, 2000)
    },

    /**
     * Returns a random integer from 0 to 100
     * @returns {integer} returns random integer
     */
    randomTemp() {
      return Math.floor(Math.random() * 101)
    },
  },
}
</script>


----------


import { shallowMount } from '@vue/test-utils'
import AmbientTemperature from '@/components/AmbientTemperature.vue'
import Plotly from 'plotly.js-dist'

jest.mock('plotly.js-dist')

describe('AmbientTemperature.vue', () => {
  let wrapper
  beforeEach(() => {
    wrapper = shallowMount(AmbientTemperature)
    Plotly.newPlot.mockClear()
    Plotly.extendTraces.mockClear()
    Plotly.update.mockClear()
    Plotly.relayout.mockClear()
  })

  afterEach(() => {
    jest.clearAllMocks()
    wrapper.destroy()
  })

  test('renders the component and initializes both graphs', () => {
    expect(Plotly.newPlot).toHaveBeenCalledTimes(2)
    expect(Plotly.newPlot).toHaveBeenCalledWith(
      expect.anything(),
      wrapper.vm.chartData,
      wrapper.vm.layout,
      wrapper.vm.config
    )
    expect(Plotly.newPlot).toHaveBeenCalledWith(
      expect.anything(),
      wrapper.vm.tempData,
      wrapper.vm.layoutTemp,
      wrapper.vm.config
    )
  })

  test('updates the main graph and indicator graph correctly', async () => {
    jest.useFakeTimers()
    const initialTemp = wrapper.vm.currentTemp
    wrapper.vm.newTrace()
    jest.advanceTimersByTime(2000) // Simulate 2 seconds

    // Main graph is updated
    expect(Plotly.extendTraces).toHaveBeenCalledWith(
      expect.anything(),
      { y: [[initialTemp]] },
      [0]
    )

    // Indicator graph is updated
    expect(Plotly.update).toHaveBeenCalledWith(
      expect.anything(),
      { value: [initialTemp] },
      [0]
    )

    jest.useRealTimers()
  })

  test('stops updating after 1000 points', async () => {
    jest.useFakeTimers()
    wrapper.vm.cnt = 999
    wrapper.vm.newTrace()
    jest.advanceTimersByTime(2000) // Simulate 2 seconds

    expect(wrapper.vm.cnt).toBe(1000)
    expect(clearInterval).toHaveBeenCalled()

    jest.useRealTimers()
  })

  test('scrolls the main graph correctly after 50 points', async () => {
    jest.useFakeTimers()
    wrapper.vm.cnt = 50
    wrapper.vm.newTrace()
    jest.advanceTimersByTime(2000) // Simulate 2 seconds

    expect(Plotly.relayout).toHaveBeenCalledWith(expect.anything(), {
      xaxis: {
        range: [1, 51],
        title: 'Sample Title',
      },
    })

    jest.useRealTimers()
  })

  test('handles abnormal temperature values gracefully', async () => {
    jest.spyOn(wrapper.vm, 'randomTemp').mockReturnValueOnce(101) // Simulate an abnormal value
    wrapper.vm.newTrace()

    expect(wrapper.vm.currentTemp).toBe(101)
    expect(Plotly.extendTraces).toHaveBeenCalledWith(
      expect.anything(),
      { y: [[101]] },
      [0]
    )
    expect(Plotly.update).toHaveBeenCalledWith(
      expect.anything(),
      { value: [101] },
      [0]
    )
  })

  test('does not crash when rendering fails', async () => {
    Plotly.newPlot.mockImplementation(() => {
      throw new Error('Plotly render error')
    })
    expect(() => wrapper.vm.renderChart()).not.toThrow()
  })

  test('stops updating when component is destroyed', async () => {
    jest.useFakeTimers()
    wrapper.vm.newTrace()
    wrapper.destroy()

    expect(clearInterval).toHaveBeenCalled()
    jest.useRealTimers()
  })
})

