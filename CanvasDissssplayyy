<template>
  <div class="mx-5">
    <canvas ref="myCanvas"></canvas>
  </div>
</template>
<script>
import { FetchAPI } from '@/utils/apiRequest'

export default {
  name: 'CanvasDisplay',
  props: {
    processArray: {
      type: Array,
      required: true,
    },
  },
  data() {
    return {
      ctx: null,
      canvas: null,
      image: null,
    }
  },
  mounted() {
    this.fetchImage()
  },
  methods: {
    /**
     * Function to get the image from backend
     */

    async fetchImage() {
      const fetchApi = new FetchAPI()
      try {
        const response = await fetchApi.get('/api/yellow-line/image/lane.png', {
          responseType: 'blob',
        })
        const imageURL = URL.createObjectURL(response)
        this.generateCanvas(imageURL)
      } catch (error) {
        console.error('Error fetching the image:', error)
      }
    },

    /**
     * Initialize canvas context
     */
    initiateCanvas() {
      this.canvas = this.$refs.myCanvas
      this.ctx = this.canvas.getContext('2d')
      this.canvas.width = 450
      this.canvas.height = 750
    },

    /**
     * Function to generate the Canvas using the image url as parameter
     * @param {String} imageDB - the image url from the database
     */
    generateCanvas(imageDB) {
      this.initiateCanvas()
      this.image = new Image()
      this.image.src = imageDB

      // Load image with the process boxes
      this.image.onload = this.loadBoxInImage
    },

    /**
     * Loads the boxes in the yellow-line image
     */
    loadBoxInImage() {
      {
        // Draw the image on the canvas
        this.ctx.drawImage(this.image, 0, 0, this.canvas.width, this.canvas.height)

        // Loop through the data and draw each rectangle
        this.processArray.forEach((rect) => {
          const { fillStyle, strokeStyle, textColor } = this.setColor(rect.opStatus)
          // Draw the rectangle
          this.ctx.fillStyle = fillStyle
          this.ctx.fillRect(rect.x, rect.y, rect.width, rect.height)
          this.ctx.strokeStyle = 'white'
          this.ctx.lineWidth = 2
          this.ctx.strokeRect(rect.x, rect.y, rect.width, rect.height)

          // Draw label inside a circle
          const circleX = rect.x + rect.width / 2
          const circleY = rect.y + rect.height / 2
          this.styleLabel(circleX, circleY, 15, rect.id, fillStyle, strokeStyle, textColor)
        })
      }
    },

    /**
     * Style the label displayed in boxes
     * @param {Number} x - x coordinate
     * @param {Number} y - y coordinate
     * @param {Number} radius - radius of circle
     * @param {String} label - text to be displayed
     * @param {String} fillStyle - background color of the circle
     * @param {String} strokeStyle - color of the border line
     * @param {String} textColor - color of the text
     */
    styleLabel(x, y, radius, label, fillStyle, strokeStyle, textColor) {
      this.ctx.beginPath()
      this.ctx.arc(x, y, radius, 0, Math.PI * 2)
      this.ctx.closePath()
      this.ctx.fillStyle = fillStyle
      this.ctx.fill()
      this.ctx.strokeStyle = strokeStyle
      this.ctx.lineWidth = 3
      this.ctx.stroke()

      this.ctx.font = 'bold 15px Arial'
      this.ctx.textAlign = 'center'
      this.ctx.textBaseline = 'middle'
      this.ctx.fillStyle = textColor
      this.ctx.fillText(label, x, y)
    },

    /**
     * Function to set the color of canvas based on their productNum
     * @param {Number} status - parameter for the productNum of the canvas
     * @returns {Object} object of color props for boxes
     */
    setColor(status) {
      const lookup = {
        1: {
          fillStyle: 'green',
          strokeStyle: 'white',
          textColor: 'white',
        },
        2: {
          fillStyle: 'yellow',
          strokeStyle: 'black',
          textColor: 'black',
        },
        3: {
          fillStyle: 'red',
          strokeStyle: 'white',
          textColor: 'white',
        },
      }

      return lookup[status]
    },
  },
}
</script>

<style scoped>
canvas {
  border: 1px solid grey;
}
</style>
