<template>
  <div class="mx-5">
    <canvas ref="myCanvas"></canvas>
  </div>
</template>
<script>
import { FetchAPI } from '@/utils/apiRequest'

export default {
  name: 'CanvasDisplay',
  /**
   * @description
   * Contains an array of objects of process.
   * - processArray {Array} - object of processes.
   */
  props: {
    processArray: {
      type: Array,
      required: true,
    },
  },
  data() {
    return {
      ctx: null,
      canvas: null,
      image: null,
    }
  },
  mounted() {
    this.fetchImage()
  },
  methods: {
    /**
     * Function to get the image from backend
     */

    async fetchImage() {
      const fetchApi = new FetchAPI()
      try {
        const response = await fetchApi.get('/api/yellow-line/image/lane.png', {
          responseType: 'blob',
        })
        const imageURL = URL.createObjectURL(response)
        this.generateCanvas(imageURL)
      } catch (error) {
        console.error('Error fetching the image:', error)
      }
    },

    /**
     * Initialize canvas context
     */
    initiateCanvas() {
      this.canvas = this.$refs.myCanvas
      this.ctx = this.canvas.getContext('2d')
      this.canvas.width = 450
      this.canvas.height = 750
    },

    /**
     * Function to generate the Canvas using the image url as parameter
     * @param {String} imageDB - the image url from the database
     */
    generateCanvas(imageDB) {
      this.initiateCanvas()
      this.image = new Image()
      this.image.src = imageDB

      // Load image with the process boxes
      this.image.onload = this.loadBoxInImage
    },

    /**
     * Loads the boxes in the yellow-line image
     */
    loadBoxInImage() {
      {
        // Draw the image on the canvas
        this.ctx.drawImage(this.image, 0, 0, this.canvas.width, this.canvas.height)

        // Loop through the data and draw each rectangle
        this.processArray.forEach((rect) => {
          const { fillStyle, strokeStyle, textColor } = this.setColor(rect.opStatus)
          // Draw the rectangle
          this.ctx.fillStyle = fillStyle
          this.ctx.fillRect(rect.x, rect.y, rect.width, rect.height)
          this.ctx.strokeStyle = 'white'
          this.ctx.lineWidth = 2
          this.ctx.strokeRect(rect.x, rect.y, rect.width, rect.height)

          // Draw label inside a circle
          const circleX = rect.x + rect.width / 2
          const circleY = rect.y + rect.height / 2
          this.styleLabel(circleX, circleY, 15, rect.id, fillStyle, strokeStyle, textColor)
        })
      }
    },

    /**
     * Style the label displayed in boxes
     * @param {Number} x - x coordinate
     * @param {Number} y - y coordinate
     * @param {Number} radius - radius of circle
     * @param {String} label - text to be displayed
     * @param {String} fillStyle - background color of the circle
     * @param {String} strokeStyle - color of the border line
     * @param {String} textColor - color of the text
     */
    styleLabel(x, y, radius, label, fillStyle, strokeStyle, textColor) {
      this.ctx.beginPath()
      this.ctx.arc(x, y, radius, 0, Math.PI * 2)
      this.ctx.closePath()
      this.ctx.fillStyle = fillStyle
      this.ctx.fill()
      this.ctx.strokeStyle = strokeStyle
      this.ctx.lineWidth = 3
      this.ctx.stroke()

      this.ctx.font = 'bold 15px Arial'
      this.ctx.textAlign = 'center'
      this.ctx.textBaseline = 'middle'
      this.ctx.fillStyle = textColor
      this.ctx.fillText(label, x, y)
    },

    /**
     * Function to set the color of canvas based on their productNum
     * @param {Number} status - parameter for the productNum of the canvas
     * @returns {Object} object of color props for boxes
     */
    setColor(status) {
      const lookup = {
        1: {
          fillStyle: 'green',
          strokeStyle: 'white',
          textColor: 'white',
        },
        2: {
          fillStyle: 'yellow',
          strokeStyle: 'black',
          textColor: 'black',
        },
        3: {
          fillStyle: 'red',
          strokeStyle: 'white',
          textColor: 'white',
        },
      }

      return lookup[status]
    },
  },
}
</script>

<style scoped>
canvas {
  border: 1px solid grey;
}
</style>


----

import { shallowMount } from '@vue/test-utils'
import CanvasDisplay from '@/components/CanvasDisplay.vue'
import { FetchAPI } from '@/utils/apiRequest'

jest.mock('@/utils/apiRequest') // Mock the FetchAPI module

describe('CanvasDisplay.vue', () => {
  let wrapper
  const mockProcessArray = [
    { x: 10, y: 20, width: 100, height: 50, opStatus: 'active', id: '1' },
    { x: 150, y: 200, width: 100, height: 50, opStatus: 'inactive', id: '2' },
  ]

  beforeEach(() => {
    // Mock the FetchAPI.get method
    FetchAPI.mockImplementation(() => {
      return {
        get: jest.fn().mockResolvedValue(new Blob()) // Mocking a blob response
      }
    })

    // Mock the canvas context methods
    const mockCanvas = {
      getContext: jest.fn(() => ({
        drawImage: jest.fn(),
        fillRect: jest.fn(),
        strokeRect: jest.fn(),
        fillText: jest.fn(),
        beginPath: jest.fn(),
        arc: jest.fn(),
        closePath: jest.fn(),
        fill: jest.fn(),
        stroke: jest.fn(),
      })),
      width: 450,
      height: 750,
    }

    wrapper = shallowMount(CanvasDisplay, {
      propsData: {
        processArray: mockProcessArray,
      },
      mocks: {
        $refs: {
          myCanvas: mockCanvas,
        },
      },
    })
  })

  afterEach(() => {
    wrapper.destroy()
  })

  it('fetches the image on mount', async () => {
    await wrapper.vm.fetchImage()
    expect(FetchAPI().get).toHaveBeenCalledWith('/api/yellow-line/image/lane.png', {
      responseType: 'blob',
    })
  })

  it('initializes the canvas context', () => {
    wrapper.vm.initiateCanvas()
    expect(wrapper.vm.canvas).toBeTruthy()
    expect(wrapper.vm.ctx).toBeTruthy()
  })

  it('generates the canvas with the image', async () => {
    const imageURL = URL.createObjectURL(new Blob())
    await wrapper.vm.generateCanvas(imageURL)
    expect(wrapper.vm.image.src).toBe(imageURL)
  })

  it('loads boxes in the image', async () => {
    const imageURL = URL.createObjectURL(new Blob())
    await wrapper.vm.generateCanvas(imageURL)
    wrapper.vm.image.onload = jest.fn(); // Mock the onload function
    await wrapper.vm.image.onload(); // Simulate image load

    expect(wrapper.vm.ctx.drawImage).toHaveBeenCalled();
    expect(wrapper.vm.processArray.length).toBeGreaterThan(0);
  })

  it('styles the label correctly', async () => {
    const imageURL = URL.createObjectURL(new Blob())
    await wrapper.vm.generateCanvas(imageURL)
    wrapper.vm.image.onload = jest.fn(); // Mock the onload function
    await wrapper.vm.image.onload(); // Simulate image load

    const rect = mockProcessArray[0]
    const circleX = rect.x + rect.width / 2
    const circleY = rect.y + rect.height / 2

    wrapper.vm.styleLabel(circleX, circleY, 15, rect.id, 'red', 'black', 'white')

    expect(wrapper.vm.ctx.fillText).toHaveBeenCalledWith(rect.id, circleX, circleY)
  })

  it('handles image fetch errors gracefully', async () => {
    FetchAPI.mockImplementation(() => {
      return {
        get: jest.fn().mockRejectedValue(new Error('Fetch error')),
      }
    });

    await wrapper.vm.fetchImage();
    // Check for console error or state change if applicable
    // You can also spy on console.error if you want to check for error logging
  });

  it('does not draw boxes if processArray is empty', async () => {
    wrapper.setProps({ processArray: [] });
    const imageURL = URL.createObjectURL(new Blob());
    await wrapper.vm.generateCanvas(imageURL);
    wrapper.vm.image.onload = jest.fn(); // Mock the onload function
    await wrapper.vm.image.onload(); // Simulate image load

    expect(wrapper.vm.ctx.fillRect).not.toHaveBeenCalled(); // No rectangles should be drawn
  });
})
